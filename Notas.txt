Temas puntuales de la sección
Esta sección es un ejercicio para practicar varios conceptos como:

Scopes

Variables locales

Store global

Módulos

LocalStorage

Session Storage

Despliegues

Vite

Documentación de funciones

La idea es practicar la manipulación del DOM y mantener un estado global de nuestra aplicación.


Una cosa importnate para la importancion de un archivo html es que siempre se espera una archivo js o algo asi, por eso vite dice que un html como tal no rescie pero esto solucionamos porneindo el html?raw,por ejemplo.import html from './app.html?raw';

La idea del store, significa que vamos a buscar la informacion en el sotre y no al padre, en lugar de consultarlo al componente vamos a consutlar en un espacio espaciel donde tengamos la ingformcioan., la libreria, (piña,real estulti).definidmos como vamos a tner ele estaod global de nu4estra aplciacon.
Explicación del concepto de "store":
Un "store" en JavaScript es como una caja central donde guardamos toda la información importante de nuestra aplicación. Imagina que estás organizando una fiesta:

La caja (store) contiene la lista de invitados, la comida, la música, etc.
Cuando quieres saber algo sobre la fiesta, miras en la caja.
Si quieres cambiar algo, como añadir un invitado, lo haces en la caja.
Todos los que ayudan con la fiesta usan la misma caja, así todos tienen la misma información actualizada.

Un store es parte de un patrón de diseño en programación, específicamente del patrón de gestión de estado. Es una forma de organizar y manejar los datos en una aplicación, especialmente en aplicaciones de cierta complejidad.
Imagina el store como el cerebro central de tu aplicación:

Centralización de datos: Es como una gran biblioteca donde guardas toda la información importante de tu app.
Fuente única de verdad: Todos los componentes de tu app consultan este "cerebro" para saber qué está pasando.
Control de cambios: Cuando algo cambia en la app, se actualiza en el store, y luego el store informa a las partes interesadas.
Predictibilidad: Al tener un lugar centralizado para los cambios, es más fácil entender cómo y por qué cambia el estado de tu app.

poara generar identificadores unico uuid es un apaeute como tal, 

En los erroes de exportancion de cosas es importnate tner en visto que nos falta digmaoas cuando solo es una cosa que exportmaos de un js, solo poenitndo como tal el nombre que queremos y el archivo js bast poer en nuestro todo store tnemos muchso export, entonces debmeos asi mismo o solo llamar lo que ncesitmaos o por el as
import * as todoStore from '/src/store/todo.store.js';
El error que estás viendo sugiere que en alguna parte de tu código (probablemente en main.js) estás intentando importar el módulo todo.store.js como un default export, pero el módulo está utilizando named exports.
Aquí hay dos formas de resolver este problema:

Cambiar la importación en main.js:

Si estás importando en main.js de esta manera:
javascriptCopyimport todoStore from '/src/store/todo.store.js';
Deberías cambiarlo a:
javascriptCopyimport * as todoStore from '/src/store/todo.store.js';
O, si solo necesitas funciones específicas:
javascriptCopyimport { initStore, addTodo, getTodos } from '/src/store/todo.store.js';
Sintaxis: document.querySelector('selector'). Aquí, selector puede ser un nombre de clase (.mi-clase), un id (#mi-id), o cualquier otro selector CSS.
improtante recoerdadr el query selector para buscar a la calse es .miclase y para buscar por ahi es id
el query selector solo devuvle el primero dde todos los elementos mientras que el otro deuvle solo el unico
getElementById solo selecciona por id y siempre selecciona un único elemento.
querySelector es más flexible porque acepta cualquier selector CSS válido y selecciona el primer elemento que coincida.
1. Seleccionar todos los elementos de una clase
Usa document.querySelectorAll('.mi-clase'), que devolverá una lista de nodos con todos los elementos que coinciden con la clase especificada.